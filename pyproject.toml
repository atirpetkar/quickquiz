[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "quickquiz-gpt"
dynamic = ["version"]
description = "AI-powered microservice for converting instructional content into high-quality quiz questions"
readme = "README.md"
requires-python = ">=3.11"
license = "MIT"
keywords = ["quiz", "education", "ai", "gpt", "fastapi", "microservice"]
authors = [
    { name = "QuickQuiz-GPT Team" },
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Education",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Framework :: FastAPI",
    "Topic :: Education",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]
dependencies = [
    "fastapi==0.104.1",
    "uvicorn[standard]==0.24.0",
    "sqlalchemy==2.0.23",
    "alembic==1.12.1",
    "psycopg2-binary==2.9.9",
    "pgvector==0.2.4",
    "redis==5.0.1",
    "langchain==0.0.340",
    "openai==1.3.5",
    "pydantic==2.5.0",
    "pydantic-settings==2.1.0",
    "pdfplumber==0.10.3",
    "trafilatura==1.6.3",
    "python-multipart==0.0.6",
]

[project.optional-dependencies]
dev = [
    "pytest==7.4.3",
    "pytest-asyncio==0.21.1",
    "pytest-cov==4.1.0",
    "ruff==0.1.6",
    "pre-commit==3.5.0",
    "httpx==0.25.2",
    "mypy==1.7.1",
    "types-redis==4.6.0.11",
]

[project.urls]
Documentation = "https://github.com/quickquiz-gpt/quickquiz-gpt#readme"
Issues = "https://github.com/quickquiz-gpt/quickquiz-gpt/issues"
Source = "https://github.com/quickquiz-gpt/quickquiz-gpt"

[tool.hatch.version]
path = "src/quickquiz/__init__.py"

[tool.hatch.build.targets.wheel]
packages = ["src/quickquiz"]

[tool.ruff]
target-version = "py311"
line-length = 88
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]

[tool.ruff.isort]
known-first-party = ["quickquiz"]

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=src/quickquiz",
    "--cov-report=term-missing:skip-covered",
    "--cov-report=html",
    "--cov-report=xml",
    "--cov-fail-under=90",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
]
asyncio_mode = "auto"

[tool.mypy]
python_version = "3.11"
check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
disallow_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_return_any = true
strict_equality = true
explicit_package_bases = true
mypy_path = "src"

[[tool.mypy.overrides]]
module = [
    "trafilatura.*",
    "pdfplumber.*",
    "pgvector.*",
    "langchain.*",
]
ignore_missing_imports = true

[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/migrations/*",
    "*/__init__.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.bandit]
exclude_dirs = ["tests", "migrations"]
skips = ["B101", "B601"]
